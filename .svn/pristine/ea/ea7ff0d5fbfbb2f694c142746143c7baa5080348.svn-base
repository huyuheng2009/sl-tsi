package com.yogapay.couriertsi.api;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.context.annotation.Scope;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.yogapay.couriertsi.domain.BossUser;
import com.yogapay.couriertsi.domain.OrderReamrk;
import com.yogapay.couriertsi.domain.RateConfig;
import com.yogapay.couriertsi.domain.RoadConfig;
import com.yogapay.couriertsi.domain.Route;
import com.yogapay.couriertsi.domain.SubstationDistance;
import com.yogapay.couriertsi.services.BossUserService;
import com.yogapay.couriertsi.services.CourierPayService;
import com.yogapay.couriertsi.services.CustomService;
import com.yogapay.couriertsi.services.OrderAddrService;
import com.yogapay.couriertsi.services.OrderRemarkService;
import com.yogapay.couriertsi.services.OrderService;
import com.yogapay.couriertsi.services.PushMsgService;
import com.yogapay.couriertsi.services.RateConfigService;
import com.yogapay.couriertsi.services.RoadConfigService;
import com.yogapay.couriertsi.services.RoadFreightService;
import com.yogapay.couriertsi.services.RouteService;
import com.yogapay.couriertsi.services.SubstationDistanceService;
import com.yogapay.couriertsi.services.SubstationService;
import com.yogapay.couriertsi.utils.CommonResponse;
import com.yogapay.couriertsi.utils.DateUtils;
import com.yogapay.couriertsi.utils.StringUtils;


@Controller
@RequestMapping(value="/userinfo")
@Scope("prototype")
public class UserInfoApi extends BaseApi{
	@Resource
	private OrderService orderService ;
	@Resource
	private BossUserService bossUserService ;
	@Resource
	private OrderRemarkService orderRemarkService ;
	@Resource
	private CustomService customService ;
	@Resource
	private OrderAddrService orderAddrService ;
	@Resource SubstationService substationService ;
	@Resource RouteService routeService ;
	@Resource RoadConfigService roadConfigService ;
	@Resource SubstationDistanceService substationDistanceService ;
	@Resource RoadFreightService roadFreightService ;
	@Resource RateConfigService rateConfigService ;
	@Resource CourierPayService courierPayService ;
	@Resource PushMsgService pushMsgService ;
	

	@RequestMapping(value = "index")	
	public void index(@RequestParam Map<String,String> params,HttpServletRequest request,HttpServletResponse response,
			@RequestParam(value = "page_no", defaultValue = "1") int cpage){
		try {
			Map<String, String> ret = validateRequest(request,new String[] {}, true);
			if ("TRUE".equals(ret.get("isSuccess"))) {
				String userName = ret.get("userNo") ;
			    BossUser bossUser =	bossUserService.getByUserName(userName) ;
                 Map<String, Object> user_info = new HashMap<String, Object>() ;
                 user_info.put("real_name", bossUser.getRealName()) ;
                 Date nowDate = new Date() ;
                 Map<String, Object> user_countMap = orderService.getUserCount(userName, nowDate, nowDate) ;
                 user_info.put("take_count", user_countMap.get("take_count")) ;
                 user_info.put("send_count", user_countMap.get("send_count")) ;
                 user_info.put("unsettle_count", courierPayService.unsettleCount(userName)) ;
                 user_info.put("unread_count", pushMsgService.unreadCount(userName)) ;
               model.put("user_info", user_info) ;
				render(JSON_TYPE, CommonResponse.respSuccessJson("",model, params.get("reqNo")), response);   			
			}else {
				log.info("validate false!!!!");
				render(JSON_TYPE, CommonResponse.respFailJson(ret.get("respCode"), ret.get("respMsg"), params.get("reqNo")),response);
			}		
		} catch (Exception e) {
			e.printStackTrace();
			render(JSON_TYPE, CommonResponse.respFailJson("9000","服务器异常", params.get("reqNo")), response);
		}
	}

	@RequestMapping(value = "settlelist")	
	public void settlelist(@RequestParam Map<String,String> params,HttpServletRequest request,HttpServletResponse response,
			@RequestParam(value = "page_no", defaultValue = "1") int cpage){
		try {
			Map<String, String> ret = validateRequest(request,new String[] {"settle_type"}, true);
			if ("TRUE".equals(ret.get("isSuccess"))) {
				String userName = ret.get("userNo") ;
				 Integer settle_type = 1 ;
				  if ("2".equals(params.get("settle_type"))) {
					settle_type = 2 ;
				 }
			    Date begin_date = null ;
			    Date end_date = null ;
			    try {
			    	if (!StringUtils.isEmptyWithTrim(params.get("order_begin_date"))) {
						begin_date = DateUtils.parseDate(params.get("order_begin_date"),"yyyy-MM-dd") ;
					}
				} catch (Exception e) {
					begin_date = null ;
				}
			    try {
			    	if (!StringUtils.isEmptyWithTrim(params.get("order_end_date"))) {
			    		end_date = DateUtils.parseDate(params.get("order_end_date"),"yyyy-MM-dd") ;
					}
				} catch (Exception e) {
					end_date = null ;
				}
				  
				Page<Map<String, Object>> pageList = courierPayService.settlelist(userName,settle_type,begin_date,end_date,getPageRequest(cpage)) ;
				Map<String, Object> page_info = new HashMap<String, Object>() ;
				page_info.put("data", pageList.getContent()) ;
				page_info.put("page_no", pageList.getNumber()) ;
				page_info.put("is_last", pageList.isLastPage()) ;
               
				model.put("page_info", page_info) ;
				render(JSON_TYPE, CommonResponse.respSuccessJson("",model, params.get("reqNo")), response);   			
			}else {
				log.info("validate false!!!!");
				render(JSON_TYPE, CommonResponse.respFailJson(ret.get("respCode"), ret.get("respMsg"), params.get("reqNo")),response);
			}		
		} catch (Exception e) {
			e.printStackTrace();
			render(JSON_TYPE, CommonResponse.respFailJson("9000","服务器异常", params.get("reqNo")), response);
		}
	}

	
	
	
	
	
	
}





