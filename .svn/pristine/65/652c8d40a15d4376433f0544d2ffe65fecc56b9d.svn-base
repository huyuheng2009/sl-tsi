package com.yogapay.couriertsi.api;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.yogapay.couriertsi.domain.BossUser;
import com.yogapay.couriertsi.domain.Config;
import com.yogapay.couriertsi.domain.OrderInfo;
import com.yogapay.couriertsi.domain.OrderPack;
import com.yogapay.couriertsi.domain.OrderScan;
import com.yogapay.couriertsi.domain.OrderTrack;
import com.yogapay.couriertsi.domain.Pack;
import com.yogapay.couriertsi.domain.Substation;
import com.yogapay.couriertsi.services.BossUserService;
import com.yogapay.couriertsi.services.ConfigService;
import com.yogapay.couriertsi.services.OrderPackService;
import com.yogapay.couriertsi.services.OrderProblemService;
import com.yogapay.couriertsi.services.OrderScanService;
import com.yogapay.couriertsi.services.OrderService;
import com.yogapay.couriertsi.services.OrderTrackService;
import com.yogapay.couriertsi.services.PackService;
import com.yogapay.couriertsi.services.SubstationService;
import com.yogapay.couriertsi.utils.CommonResponse;
import com.yogapay.couriertsi.utils.DateUtils;


@Controller
@RequestMapping(value="/railway")
@Scope("prototype")
public class RailwayApi extends BaseApi{
	@Resource
	private BossUserService bossUserService ;
	@Resource
	private OrderService orderService  ;
	@Resource
	private OrderProblemService orderProblemService ;
	@Resource
	private PackService packService  ;
	@Resource
	private OrderPackService orderPackService ;
	@Resource
	private ConfigService configService ;
	@Resource
	private SubstationService substationService ;
	@Resource
	private OrderTrackService orderTrackService ;
	@Resource private OrderScanService orderScanService ;
	 

	@RequestMapping(value = "packinfo")	
	public void scan(@RequestParam Map<String,String> params,HttpServletRequest request,HttpServletResponse response){
		try {
			Map<String, String> ret = validateRequest(request,new String[] {"pack_no"}, true);
			if ("TRUE".equals(ret.get("isSuccess"))) {
				String userName = ret.get("userNo") ;
                
                Pack pack = packService.getByPackNo(params.get("pack_no")) ;
                if (pack==null) {
			    	render(JSON_TYPE, CommonResponse.respFailJson("9999","包号不存在", params.get("reqNo")), response);
					return ;
				}
               List<String> data =  orderPackService.getOrderNoByPackNo(pack.getPackNo()) ;
               if (data.size()<1) {
			    	render(JSON_TYPE, CommonResponse.respFailJson("9999","包号为空包，请先打包扫描", params.get("reqNo")), response);
					return ;
				}
                float max_cost = orderPackService.getPackOrderCost(pack.getPackNo()) ;
                Map<String, Object> pack_info = new HashMap<String, Object>() ;
                pack_info.put("data", data) ;
                pack_info.put("max_cost", max_cost) ;
                pack_info.put("isfee", pack.getIsfee()) ;
                model.put("pack_info", pack_info) ;

				render(JSON_TYPE, CommonResponse.respSuccessJson("",model, params.get("reqNo")), response);   			
			}else {
				log.info("validate false!!!!");
				render(JSON_TYPE, CommonResponse.respFailJson(ret.get("respCode"), ret.get("respMsg"), params.get("reqNo")),response);
			}		
		} catch (Exception e) {
			e.printStackTrace();
			render(JSON_TYPE, CommonResponse.respFailJson("9000","服务器异常", params.get("reqNo")), response);
		}
	}


	@RequestMapping(value = "del")	
	public void del(@RequestParam Map<String,String> params,HttpServletRequest request,HttpServletResponse response){
		try {
			Map<String, String> ret = validateRequest(request,new String[] {"pack_no","order_no"}, true);
			if ("TRUE".equals(ret.get("isSuccess"))) {
				String userName = ret.get("userNo") ;
                BossUser bossUser = bossUserService.getByUserName(userName) ;
                Substation substation = substationService.getBySno(bossUser.getSno()) ;
                if (substation==null||substation.getLevel()!=2) {
                	render(JSON_TYPE, CommonResponse.respFailJson("9999","网点错误，一级中转中心才能进行打包", params.get("reqNo")), response);
					return ;
				}
                Pack pack = packService.getByPackNo(params.get("pack_no")) ;
                if (pack==null) {
					render(JSON_TYPE, CommonResponse.respFailJson("9999","包号不存在", params.get("reqNo")), response);
					return ;
				}
				OrderPack orderPack = orderPackService.getByOrderNo(params.get("order_no")) ;
				if (orderPack==null) {
					render(JSON_TYPE, CommonResponse.respFailJson("9999","单号未进行打包", params.get("reqNo")), response);
					return ;
				}
				if (!params.get("pack_no").equals(orderPack.getPackNo())) {
					render(JSON_TYPE, CommonResponse.respFailJson("9999","包内不存在此单号", params.get("reqNo")), response);
					return ;
				}
                orderPackService.delByOrderNo(params.get("order_no"));
                orderTrackService.delById(orderPack.getTrackId()) ;
				render(JSON_TYPE, CommonResponse.respSuccessJson("","删除成功", params.get("reqNo")), response);   			
			}else {
				log.info("validate false!!!!");
				render(JSON_TYPE, CommonResponse.respFailJson(ret.get("respCode"), ret.get("respMsg"), params.get("reqNo")),response);
			}		
		} catch (Exception e) {
			e.printStackTrace();
			render(JSON_TYPE, CommonResponse.respFailJson("9000","服务器异常", params.get("reqNo")), response);
		}
	}
	


}


